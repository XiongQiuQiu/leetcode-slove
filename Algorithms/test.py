def cherryPickup(grid):
    """
    :type grid: List[List[int]]
    :rtype: int
    """
    L = len(grid)
    dp = {i: {i: -1 for i in range(L)} for i in range(L)}
    dp[0][0] = grid[0][0]
    for t in range(1, 2 * L - 1):
        for i in range(L)[::-1]:
            for p in range(L)[::-1]:
                j = t - i
                q = t - p
                if (j < 0 or q < 0 or j >= L or q >= L or grid[i][j] < 0 or grid[p][q] < 0):
                    dp[i][p] = -1
                    continue
                if i > 0: dp[i][p] = max(dp[i][p], dp[i - 1][p])
                if p > 0: dp[i][p] = max(dp[i][p], dp[i][p - 1])
                if i > 0 and p > 0:
                    dp[i][p] = max(dp[i][p], dp[i - 1][p - 1])
                if dp[i][p] >= 0:
                    second = grid[p][q] if i != p else 0
                    dp[i][p] += grid[i][j] + second
    return max(dp[L - 1][L - 1], 0)
print cherryPickup([[1,1,-1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,-1,1],[1,1,-1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],[1,-1,-1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1],[1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1],[1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1],[1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1],[1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,1,1,1,-1,-1,1],[-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,1,-1],[1,1,1,-1,1,1,1,-1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1],[1,-1,1,1,1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1],[1,1,1,-1,1,1,1,1,1,1,1,-1,1,-1,-1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,-1,1,-1,1,1,1],[1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,-1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1],[1,1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,1],[1,-1,1,1,1,1,1,-1,1,1,1,-1,1,1,-1,0,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1],[1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1],[1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,-1,-1],[1,1,1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,1,1,1],[-1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,-1,1,1,1,-1,1,1,1,1],[1,1,1,1,1,-1,-1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,-1,1,1,-1,1,-1,-1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,-1],[1,1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,-1,-1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1],[1,1,-1,1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1],[1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,-1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1],[-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,-1,1,1],[1,1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1],[1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1],[1,-1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,1,1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,-1],[1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,-1,1,-1,-1,1,-1],[-1,1,1,1,1,1,1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,-1,1,1,-1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,1,-1,1,-1,1,1,-1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1],[1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1],[1,1,1,-1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,1],[-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,-1,1],[1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1],[1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,-1,1,1,1],[1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1],[1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1],[1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1],[-1,1,1,-1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,1],[1,1,-1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1],[1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,-1,1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1]])


aa = [[1,1,-1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,-1,1],[1,1,-1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],[1,-1,-1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1],[1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1],[1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1],[1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1],[1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,1,1,1,-1,-1,1],[-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,1,-1],[1,1,1,-1,1,1,1,-1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1],[1,-1,1,1,1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1],[1,1,1,-1,1,1,1,1,1,1,1,-1,1,-1,-1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,-1,1,-1,1,1,1],[1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,-1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1],[1,1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,1],[1,-1,1,1,1,1,1,-1,1,1,1,-1,1,1,-1,0,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1],[1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1],[1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,-1,-1],[1,1,1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,1,1,1],[-1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,-1,1,1,1,-1,1,1,1,1],[1,1,1,1,1,-1,-1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,-1,1,1,-1,1,-1,-1,1,1,1,-1,1,1,1,1,1,1,1,1],[1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,-1],[1,1,1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,-1,-1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1],[1,1,-1,1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1],[1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,-1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1],[-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,-1,1,1],[1,1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1],[1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1],[1,-1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,1,1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,-1],[1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,-1,1,-1,-1,1,-1],[-1,1,1,1,1,1,1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,-1,1,1,-1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,1,-1,1,-1,1,1,-1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1],[1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1],[1,1,1,-1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,1],[-1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,-1,1],[1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1],[1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,-1,1,1,1],[1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1],[1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1],[1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1],[-1,1,1,-1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,1],[1,1,-1,-1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,-1],[1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,-1,1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1]]

def cherryPickup1(grid):
    """
    :type grid: List[List[int]]
    :rtype: int
    """
    L = len(grid)
    dp = {i: {i: -1 for i in range(L)} for i in range(L)}
    dp[0][0] = grid[0][0]
    for t in range(1, 2 * L - 1):
        for i in range(L)[::-1]:
            for p in range(L)[::-1]:
                j = t - i
                q = t - p
                if (j < 0 or q < 0 or j >= L or q >= L or grid[i][j] < 0 or grid[p][q] < 0):
                    dp[i][p] = -1
                    continue
                if i > 0: dp[i][p] = max(dp[i][p], dp[i - 1][p])
                if p > 0: dp[i][p] = max(dp[i][p], dp[i][p - 1])
                if i > 0 and p > 0:
                    dp[i][p] = max(dp[i][p], dp[i - 1][p - 1])
                if dp[i][p] >= 0:
                    second = grid[p][q] if i != p else 0
                    dp[i][p] += grid[i][j] + second
    return max(dp[L - 1][L - 1], 0)
def cherryPickup(grid):
    """
    :type grid: List[List[int]]
    :rtype: int
    """
    L = len(grid)
    dp = [[-1 for i in range(L) ]for i in range(L)]
    dp[0][0] = grid[0][0]
    for t in range(1, 2 * L - 1):
        for i in range(L)[::-1]:
            for p in range(L)[::-1]:
                j = t - i
                q = t - p
                if (j < 0 or q < 0 or j >= L or q >= L or grid[i][j] < 0 or grid[p][q] < 0):
                    dp[i][p] = -1
                    continue
                if i > 0: dp[i][p] = max(dp[i][p], dp[i - 1][p])
                if p > 0: dp[i][p] = max(dp[i][p], dp[i][p - 1])
                if i > 0 and p > 0:
                    dp[i][p] = max(dp[i][p], dp[i - 1][p - 1])
                if dp[i][p] >= 0:
                    second = grid[p][q] if i != p else 0
                    dp[i][p] += grid[i][j] + second
    return max(dp[L - 1][L - 1], 0)